services:
  user-service:
    container_name: user-service
    build:
      context: ./user_service
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JWT_SECRET=D4fN8Qr6Zu1WgX9Cv3PyL5Mk2Jh7Vt0s
    ports:
      - "8081:8080"
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JWT_SECRET=D4fN8Qr6Zu1WgX9Cv3PyL5Mk2Jh7Vt0s
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      user-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

#  message-service:
#    container_name: message-service
#    build:
#      context: ./message_service
#      dockerfile: Dockerfile
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - JWT_SECRET=D4fN8Qr6Zu1WgX9Cv3PyL5Mk2Jh7Vt0s
#    ports:
#      - "8082:8080"
#    networks:
#      - app-network
#    depends_on:
#      - postgres
#
#  notification-service:
#    container_name: notification-service
#    build:
#      context: ./notification_service
#      dockerfile: Dockerfile
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - JWT_SECRET=D4fN8Qr6Zu1WgX9Cv3PyL5Mk2Jh7Vt0s
#    ports:
#      - "8083:8080"
#    networks:
#      - app-network
#    depends_on:
#      - postgres


  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "7070:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - app-network
    depends_on:
      - kafka
      - zookeeper

  postgres:
    container_name: postgres
    image: postgres:17.5
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=userDB
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin" ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  kafka_data:
